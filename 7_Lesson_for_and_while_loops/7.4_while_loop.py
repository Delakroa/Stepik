# Цикл while

# Как уже было сказано в предыдущем уроке существуют две основные разновидности цикла:
#
# циклы, повторяющиеся определенное количество раз (for, счетные циклы, counting loops);
# циклы, повторяющиеся до наступления определенного события (while, условные циклы, conditional loops)
# Мы уже рассмотрели работу цикла for, который является счетным циклом. Цикл for замечательно работает,
# если мы заранее знаем, сколько повторений (итераций) нам потребуется сделать. Но иногда нужно,
# чтобы цикл выполнялся до наступления некоторого события, и количество итераций в этом случае заранее оценить
# просто невозможно. И здесь на помощь приходит цикл while.
#
# Структура цикла while в Python выглядит так:

# while условие:
#     блок кода

# Двоеточие (:) в конце строки с инструкцией while сообщает Python, что дальше находится блок команд.
# В блок входят все строки, расположенные с отступом от строки с инструкцией while, вплоть до следующей строки
# без отступа.
#
# Блок команд, который выполняется в цикле while, называется телом цикла.
#
# Рассмотрим код, использующий цикл while, который распечатает 10 раз слово Привет:

i = 0
while i < 10:
    print('Привет')
    i += 1

# Такой код можно легко заменить циклом for, поскольку мы заранее знаем сколько раз нужно выполнить тело цикла.
# Однако так бывает не всегда.
#
# Напишем программу, которая считывает числа и выводит их квадраты, пока не будет введено -1. При такой постановке
# задачи мы не можем воспользоваться циклом for, так как не знаем сколько чисел будет предшествовать числу -1.

num = int(input())
while num != -1:
    print('Квадрат вашего числа равен:', num * num)
    num = int(input())

# В качестве начального значения переменной num, мы используем первое из чисел. Далее пока выполняется условие цикла,
# а именно, пока введенное число не равно -1, мы исполняем тело цикла. В тело цикла входит две команды:

# 1. напечатать квадрат введенного числа;
# 2. считать следующее число.

# Важным являются два момента:
#
# 1. правильная инициализация переменной num;
# 2. изменение переменной num внутри цикла while.

# Важно: если не изменять переменную num внутри цикла, то можно получить так называемый бесконечный цикл,
# который будет выполняться бесконечно много раз.

# ------------------------------------------------------------------------------------------------------------------

# Цикл for VS цикл while

# Мы всегда можем заменить цикл for с помощью цикла while. Следующие две программы выводят числа от 0 до 100:

# используем for
# for i in range(101):
#     print(i)

# используем while
# i = 0
# while i < 101:
#     print(i)
#     i += 1

# В первом цикле переменная i последовательно принимает значения от 0 до 100. Для цикла while, нам пришлось завести
# самостоятельно переменную i и придать ей начальное значение. Тело цикла while содержит аналогичную инструкцию
# вывода print(i), однако помимо этого мы самостоятельно увеличиваем значение переменной i на 1, что делается
# автоматически в случае с циклом for.

# Напишем программу, выводящую все числа, кратные 3, используя цикл for и while:

# используем for
# for i in range(0, 100, 3):
#     print(i)

# используем while
# i = 0
# while i < 100:
#     print(i)
#     i += 3

# Не всегда, однако удается заменить цикл while с помощью цикла for. Если заранее не известно количество итераций,
# то необходимо использовать цикл while и только его.

# -------------------------------------------------------------------------------------------------------------------

# Считывание данных до стоп значения

# Часто при решении задач на цикл while, мы считываем данные, до тех пор пока пользователь не введет некоторое значение,
# которое называют стоп значением. Напишем программу, которая считывает числа и находит их сумму, до тех пор пока
# пользователь не введет слово stop:

text = input()
total = 0
while text != 'stop':
    num = int(text)
    total += num
    text = input()
print('Сумма чисел равна', total)

# Такой код будет часто использоваться при решении задач.

# -------------------------------------------------------------------------------------------------------------------

# Бесконечный цикл

# Всегда, кроме редких случаев, цикл while должен содержать возможность завершиться. То есть в цикле что-то должно
# сделать проверяемое условие ложным. Если цикл не имеет возможности завершиться, то он называется бесконечным циклом.
# Бесконечный цикл продолжает повторяться до тех пор, пока программа не будет прервана. Бесконечные циклы обычно
# появляются, когда программист забывает написать программный код внутри цикла, который делает проверяемое условие
# ложным. В большинстве случаев следует избегать применения бесконечных циклов.
#
# Пример бесконечного цикла:

i = 0
total = 0
while i < 10:
    total += i

# Так как в теле цикла не происходит изменения переменной i, то условие i < 10 остается истинным и цикл выполняется
# бесконечно много раз.
#
# Бесконечные циклы можно использовать в связке с оператором прерывания break. Об этом будет рассказано в следующих
# уроках.

# Примечания
#
# Примечание 1. Цикл while получил свое название из-за характера своей работы: он выполняет некую задачу до тех пор,
# пока условие является истинным. Слово while на английском означает как раз "пока".
#
# Примечание 2. Цикл while называют циклом с предусловием, поскольку выполнению тела цикла предшествует проверка условия
# (сначала проверяется условие, а уже затем выполняется тело цикла).
#
# Примечание 3. Однократное выполнение тела цикла называется итерацией цикла.
#
# Примечание 4. Цикл while может не выполниться ни одного раза. Например, следующий код:

i = -1
while i > 0:
    print('Hello world!')

# не выведет текст, поскольку условие i > 0 ложно с самого начала.
#
# Примечание 5. Графическое представление цикла while имеет вид:

# Примечание 6. Условие в цикле while, как и в условном операторе if, может содержать логические операции or, and, not.

# -------------------------------------------------------------------------------------------------------------------

# До КОНЦА 1

# На вход программе подается последовательность слов, каждое слово на отдельной строке. Концом последовательности
# является слово «КОНЕЦ» (без кавычек). Напишите программу, которая выводит члены данной последовательности.
#
# Формат входных данных
# На вход программе подается последовательность слов, каждое слово на отдельной строке.
#
# Формат выходных данных
# Программа должна вывести члены данной последовательности.

text = str(input())
while text != 'КОНЕЦ':
    print(text)
    text = input()

# -------------------------------------------------------------------------------------------------------------------

# До КОНЦА 2
#
# На вход программе подается последовательность слов, каждое слово на отдельной строке. Концом последовательности
# является слово «КОНЕЦ» или «конец» (большими или маленькими буквами, без кавычек). Напишите программу, которая
# выводит члены данной последовательности.
#
# Формат входных данных
# На вход программе подается последовательность слов, каждое слово на отдельной строке.
#
# Формат выходных данных
# Программа должна вывести члены данной последовательности.

text = str(input())
while text != 'КОНЕЦ' and text != 'конец':
    print(text)
    text = input()

# -------------------------------------------------------------------------------------------------------------------

# Количество членов
#
# На вход программе подается последовательность слов, каждое слово на отдельной строке. Концом последовательности
# является одно из трех слов: «стоп», «хватит», «достаточно» (маленькими буквами, без кавычек). Напишите программу,
# которая выводит общее количество членов данной последовательности.
#
# Формат входных данных
# На вход программе подается последовательность слов, каждое слово на отдельной строке.
#
# Формат выходных данных
# Программа должна вывести общее количество членов данной последовательности.

text = str(input())
count = 0
while text != 'стоп' and text != 'хватит' and text != 'достаточно':
    count += 1
    text = input()
print(count)

# -------------------------------------------------------------------------------------------------------------------

# Пока делимся
#
# На вход программе подается последовательность целых чисел делящихся на 7, каждое число на отдельной строке.
# Концом последовательности является любое число не делящееся на 7. Напишите программу, которая выводит члены данной
# последовательности.
#
# Формат входных данных
# На вход программе подается последовательность чисел, каждое число на отдельной строке.
#
# Формат выходных данных
# Программа должна вывести члены данной последовательности.

number = int(input())
while number % 7 == 0:
    print(number)
    number = int(input())

# -------------------------------------------------------------------------------------------------------------------

# Сумма чисел
#
# На вход программе подается последовательность целых чисел, каждое число на отдельной строке. Концом последовательности
# является любое отрицательное число. Напишите программу, которая выводит сумму всех членов данной последовательности.
#
# Формат входных данных
# На вход программе подается последовательность чисел, каждое число на отдельной строке.
#
# Формат выходных данных
# Программа должна вывести сумму членов данной последовательности.

number = int(input())
data1 = 0
while number >= 0:
    data1 += number
    number = int(input())
print(data1)

# -------------------------------------------------------------------------------------------------------------------

# Количество пятерок
#
# На вход программе подается последовательность целых чисел от 1 до 5, характеризующее оценку ученика, каждое
# число на отдельной строке. Концом последовательности является любое отрицательное число, либо число большее 5.
# Напишите программу, которая выводит количество пятерок.
#
# Формат входных данных
# На вход программе подается последовательность чисел, каждое число на отдельной строке.
#
# Формат выходных данных
# Программа должна вывести количество пятерок.

n = int(input())
count = 0
while 0 <= n <= 5:
    if n == 5:
        count += 1
    n = int(input())
print(count)

# Второй вариант:
n, count = int(input()), 0
while 0 <= n <= 5:
    count += n == 5
    n = int(input())
print(count)

# -------------------------------------------------------------------------------------------------------------------

# Ведьмаку заплатите чеканной монетой
#
# Всем известно, что ведьмак способен одолеть любых чудовищ, однако его услуги обойдутся недешево, к тому же ведьмак
# не принимает купюры, он принимает только чеканные монеты. В мире ведьмака существуют монеты с номиналами 1,5,10,25.

# Напишите программу, которая определяет какое минимальное количество чеканных монет нужно заплатить ведьмаку.
#
# Формат входных данных
# На вход программе подается одно натуральное число, цена за услугу ведьмака.
#
# Формат выходных данных
# Программа должна вывести минимально возможное количество чеканных монет для оплаты.

n = int(input())
count = 0
while n >= 25:
    count += 1
    n -= 25
while n >= 10:
    count += 1
    n -= 10
while n >= 5:
    count += 1
    n -= 5
while n >= 1:
    count += 1
    n -= 1
print(count)

# -------------------------------------------------------------------------------------------------------------------

# max и min

# Дано натуральное число n,( n >= 10). Напишите программу, которая определяет его максимальную и минимальную цифры.

# Формат входных данных
# На вход программе подается одно натуральное число.
#
# Формат выходных данных
# Программа должна вывести максимальную и минимальную цифры введенного числа (с поясняющей надписью).

num: int = int(input())
min_num = 9
max_num = 0
while num != 0:
    last_digit = num % 10
    if last_digit > max_num:
        max_num = last_digit
    if last_digit < min_num:
        min_num = last_digit
    num //= 10
print('Максимальная цифра равна', max_num)
print('Минимальная цифра равна', min_num)


# -------------------------------------------------------------------------------------------------------------------

# Все вместе
#
# Дано натуральное число. Напишите программу, которая вычисляет:
#
# сумму его цифр;
# количество цифр в нем;
# произведение его цифр;
# среднее арифметическое его цифр;
# его первую цифру;
# сумму его первой и последней цифры.
#
# Формат входных данных
# На вход программе подается одно натуральное число.
#
# Формат выходных данных
# Программа должна вывести значения указанных величин в указанном порядке.

def together():
    number = int(input())
    flag = 0
    count_sum = 0  # Счётчик суммы
    quantity_counter = 0  # кол-во
    product_counter = 1  # произведения
    last_count = 0  # последнее число
    while digit != 0:
        digit = number % 10  # Последняя цифра
        last_count = digit  # для запоминания последней цифры
        count_sum += digit  # сумма
        quantity_counter += 1  # счётчик кол-во
        product_counter *= digit  # произведение
        a = count_sum / quantity_counter
        digit //= 10  # Убираем последнюю цифру
        flag += 1
    print('Последняя цифра', digit)
    print('Сумма', count_sum)
    print('Количество цифр', quantity_counter)
    print('Произведение', product_counter)
    print('Среднее', a)
