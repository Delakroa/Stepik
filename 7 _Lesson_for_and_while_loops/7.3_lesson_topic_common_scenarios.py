# Тема урока: частые сценарии
#
# 1. Подсчет количества
# 2. Вычисление суммы и произведения
# 3. Обмен значений переменных
# 4. Сигнальные метки
# 5. Определение максимума и минимума
# 6. Расширенные операторы присваивания
#
# Аннотация. Рассмотрим частые сценарии при написании циклов.
#
# Подсчет количества
#
# Нередко нужно, чтобы наши программы подсчитывали сколько раз что-либо произошло. К примеру видео игра может
# подсчитывать количество поворотов персонажа или математическая программа может считать как много чисел обладают
# некоторым свойством. Ключ к подсчету - использование переменной счетчика.
#
# Напишем программу, которая считывает 10 чисел и определяет сколько из них больше 10.

counter = 0
for i in range(10):
    num = int(input())
    if num > 10:
        counter = counter + 1
print(f"Было введено {counter} числа, больших 10")

# Каждый раз когда мы считываем число большее 10, мы добавляем 1 к нашему текущему значению переменной counter.
# В программе это реализовано в строке counter = counter + 1. Обратите внимание на начальное значение переменной
# счетчика counter = 0. Без начального значения мы получили бы ошибку, поскольку дойдя до строки counter = counter + 1
# Python ничего не знал бы о переменной counter. Строка кода counter = counter + 1 означает: возьми старое значение
# переменной counter, прибавь к нему 1 и переприсвой переменной это значение. Если не придать переменной начальное
# значение, то непонятно, к чему прибавлять 1 в самый первый раз.
#
# Подсчет количества – это очень частый сценарий. Он состоит из двух шагов:
#
# 1. Создание переменной счетчика и придание ей первоначального значения: counter = 0;
# 2. Увеличение переменной счетчика на 1: counter = counter + 1.
#
# Часто при написании программ требуется использовать несколько счетчиков. Модифицируем предыдущую программу:
# посчитаем еще и количество нулей среди введенных чисел.

counter1 = 0
counter2 = 0
for i in range(10):
    num = int(input())
    if num > 10:
        counter1 = counter1 + 1
    if num == 0:
        counter2 = counter2 + 1
print('Было введено', counter1, 'чисел, больших 10.')
print('Было введено', counter2, 'нулей.')

# Рассмотрим еще один пример: подсчитать количество чисел из диапазона [1;100], квадрат которых оканчивается на 4.

counter = 0
for i in range(1, 101):
    if i**2 % 10 == 4:
        counter = counter + 1
print(counter)

# Мы используем функцию range() с двумя параметрами для генерации последовательности чисел от 1 до 100. Переменная i
# последовательно принимает значения от 1 до 100, мы проверяем, условие: квадрат числа i оканчивается на 4 с помощью
# условия i**2 % 10 == 4.

# !!!Для переменной счетчика удобно использовать имя counter. !!!

# -------------------------------------------------------------------------------------------------------------------

# Вычисление суммы и произведения

# Наравне с подсчетом количества по частоте стоит задача вычисления суммы. К примеру видео игра должна считать сумму
# очков. В таком случае начальное значение переменной будет равно 0, а далее оно будет увеличиваться на некоторое
# количество заработанных очков, скажем на 10. Мы пишем следующий код:

score = 0
...
score = score + 10

# Напишем программу, которая считывает 10 чисел и определяет сумму тех из них, которые больше 10.

total = 0
for i in range(10):
    num = int(input())
    if num > 10:
        total = total + num
print('Сумма чисел больших 10 равна',  total)

# Каждый раз когда программа считывает число большее 10, она добавляет его к текущему значению переменной total.
# Это реализовано в строке total = total + num. Обратите внимание на начальное значение переменной сумматора total = 0.
# Без начального значения, мы получили бы ошибку, поскольку дойдя до строки total = total + num Python ничего не знал
# бы о переменной total. Строка кода total = total + num означает возьми старое значение переменной total, прибавь к
# нему num и переприсвой переменной это значение. Если не придать переменной начальное значение, то не к чему прибавлять
# num в самый первый раз.

# Подсчет суммы состоит из двух шагов:
#
# Создание переменной сумматора и придание ей первоначального значения: total = 0;
# Увеличение переменной сумматора на нужное число: total = total + num.
# Напишем программу, которая считает сумму натуральных чисел от 1 до 100:

total = 0
for i in range(1, 101):
    total = total + i
print('Сумма равна', total)

# Рассмотрим еще один пример: напишем программу, которая запрашивает 10 целых чисел и находит их среднее значение:

total = 0
for i in range(10):
    num = int(input())
    total = total + num
average = total / 10
print('Среднее значение равно', average)

# Аналогичным образом вычисляется произведение. При вычислении произведения, начальное значение переменной
# мультипликатора мы устанавливаем равным 1, в отличии от сумматора, где оно равно 0.
#
#     !!!Для переменной сумматора и мультипликатора удобно использовать имя total.!!!

# -------------------------------------------------------------------------------------------------------------------

# Обмен значений переменных

# Очень часто нам требуется обменять значения двух переменных x и y. Начинающие программисты иногда пишут такой код:
#
# x = y
# y = x
# Однако он не работает. Предположим, что x = 3 и y = 5. Первая строка присвоит переменной x значение 5, что правильно,
# однако вторая строка установит значение переменной y в 5, поскольку значение x уже равно 5. Для решения задачи мы
# можем использовать временную переменную:

# temp = x
# x = y
# y = temp
#
# Такой код пишут почти во всех языках программирования. Однако в Python есть и более простой способ.
# Мы можем написать так:

# x, y = y, x

# В результате выполнения такого кода Python поменяет значения переменных x и y местами

# -------------------------------------------------------------------------------------------------------------------

# Сигнальные метки

